FixMat
======

.. module:: ocupy.fixmat

A fixmat is a subclassed datamat that mainly contains some legacy code 
to maintain compatibility. Perhaps the only really usefull function in here
is the compute_fdm function. 
 
The next example shows how you would compute an FDM of the entire fixmat
(a.k.a. the spatial bias). 

.. plot::
	:include-source:
	
	import numpy as np
	from ocupy import fixmat
	import pylab as plot
	fm = fixmat.FixmatFactory('../ocupy/tests/fixmat_demo.mat')
	fdm = fixmat.compute_fdm(fm,scale_factor=0.25)
	plot.imshow(fdm)
	plot.show()
	
Most often only a subset of the data is of interest. The fixmat can be filtered by using square brackets:

	>>> fm = fm[fm.category == 7]
	>>> print fm
	Fixmat with 932 fixations and the following data fields:
	          Field Name |     Length    |    Type    |        Values        
	---------------------+---------------+------------+----------------
	            category |      932      |   int32    |         [7]          
	                 end |      932      |   int32    |         Many         
	                 fix |      932      |   uint8    |         Many         
	        SUBJECTINDEX |      932      |   uint8    |         [36]         
	               start |      932      |   int32    |         Many         
	            on_image |      932      |   uint8    |        [0 1]         
	                   y |      932      |  float32   |         Many         
	                   x |      932      |  float32   |         Many         
	          filenumber |      932      |   uint16   |         Many         
	           condition |      932      |   uint8    |         [1]          
	---------------------+---------------+------------+----------------
	      Parameter Name | Value               
	---------------------+---------------------------------------------
	          image_size | [960, 1280] 
	   pixels_per_degree | 45 


How does this work? The expression in the brackets is evaluated for every entry in
the *fm.category* field. This results in a vector of booleans that has the same size
as the *fm.category* field. Using the square brackets applies this logical index to all
fields of the fixmat. Several logical expressions can be combined with logical operators.
In contrast to matlab the *logical* operators have stronger binding than the *comparison* 
operators. Thus, *fm.category == 1 & fm.SUBJECTINDEX == 2* will produce an error because
will try to bind *1 & fm.SUBJECTINDEX*. To filter correctly, you have to use parenthesis 
(see next example).

.. plot::
	:include-source:
	
	import numpy as np
	from ocupy import fixmat
	import pylab as plot
	fm = fixmat.FixmatFactory('../ocupy/test/fixmat_demo.mat')
	fm = fm[(fm.filenumber == 1) & (fm.category == 7)]
	fdm = fixmat.compute_fdm(fm,scale_factor=0.25)
	plot.imshow(fdm)
	plot.show()

In matlab we would traditionally use for loops over all unique values of a field
to iterate over the field. In python this is easier, we can simply use the :func:`by_field`
method::
	
	fm = TestFixmatFactory(categories = [1, 2, 3], filenumbers = [1, 2, 3], subjectindices = [1, 2, 3])
	for cat_mat in fm.by_field('category'):
			for img_mat in cat_mat.by_field('filenumber'):
				# The img_mat now contains all fixation data for one image
				# in one cagegory
				pass
				
There is a short-cut for iterating over categories and images (because it is so common):
				
.. plot::
	:include-source:
	
	import numpy as np
	from ocupy import fixmat
	import pylab as plot
	fm = fixmat.FixmatFactory('../ocupy/tests/fixmat_demo.mat')
	fm = fm[(fm.filenumber > 36) & (fm.filenumber < 40)]
	for cat,(cat_mat,_) in enumerate(fm.by_cat()):
		for img,(img_mat,_) in enumerate(cat_mat.by_filenumber()):
			fdm = fixmat.compute_fdm(img_mat,scale_factor=0.25)
			plot.subplot(2,3, (3*cat)+img)
			plot.xticks([])
			plot.yticks([]) 
			plot.imshow(fdm)
	plot.show()

There are some other usefull functions (:func:`add_field`, :func:`join`, :func:`parameters` and
:func:`fieldnames`). See the following reference section for more details.


.. autoclass:: FixMat
    :members:

Computing a fixation density map
---------------------------------


.. plot::
   	:include-source:

	import numpy as np
	from ocupy import fixmat
	import pylab as plot
	points = np.random.random((2,100))*500
	fm = fixmat.TestFixmatFactory(points = points, params = {'image_size' : [500,500]})
	fdm = fixmat.compute_fdm(fm)
	plot.imshow(fdm)
	plot.show()
.. autofunction:: compute_fdm

